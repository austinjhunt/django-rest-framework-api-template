"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from dotenv import load_dotenv
from pathlib import Path
import os
import sys
import boto3
import sentry_sdk

load_dotenv()

DJANGO_ENV = os.getenv("DJANGO_ENV", "development")

PRODUCTION_FRONTEND_URL = os.getenv("PRODUCTION_FRONTEND_URL", "http://localhost:3000")
FRONTEND_URL = PRODUCTION_FRONTEND_URL if DJANGO_ENV == "production" else "http://localhost:3000"

########################################
####### AWS CLOUDWATCH LOGGING #########
########################################
# Should use a key pair with an IAM user that
# specifically has write access to CW
AWS_CLOUDWATCH_ACCESS_KEY_ID = os.environ.get("AWS_CLOUDWATCH_ACCESS_KEY_ID")
AWS_CLOUDWATCH_SECRET_ACCESS_KEY = os.environ.get("AWS_CLOUDWATCH_SECRET_ACCESS_KEY")
AWS_DEFAULT_REGION = os.environ.get("AWS_DEFAULT_REGION", "us-east-2")
INFO_LOG_HANDLER = {"class": "logging.StreamHandler"}
if AWS_CLOUDWATCH_SECRET_ACCESS_KEY and AWS_CLOUDWATCH_ACCESS_KEY_ID and DJANGO_ENV == "production":
    INFO_LOG_HANDLER = {
        # Default to INFO and higher.
        # Logger using this handler may override with debug if DJANGO_LOG_LEVEL=debug
        "level": "INFO",
        "class": "watchtower.CloudWatchLogHandler",
        "boto3_client": boto3.client(
            service_name="logs",
            aws_access_key_id=AWS_CLOUDWATCH_ACCESS_KEY_ID,
            aws_secret_access_key=AWS_CLOUDWATCH_SECRET_ACCESS_KEY,
            region_name=AWS_DEFAULT_REGION,
        ),
        "log_group": "novabrains-backend",
        # Should use a different stream for each environment
        "stream_name": f"logs",
    }

########################################
####### SENTRY ERROR REPORTING #########
########################################

SENTRY_DSN = os.environ.get("SENTRY_DSN", None)
if SENTRY_DSN:
    sentry_sdk.init(
        dsn=SENTRY_DSN,
        integrations=[sentry_sdk.integrations.django.DjangoIntegration()],
        # If you wish to associate users to errors (assuming you are using
        # django.contrib.auth) you may enable sending PII data.
        send_default_pii=True,
        # Set traces_sample_rate to 1.0 to capture 100%
        # of transactions for performance monitoring.
        # We recommend adjusting this value in production.
        traces_sample_rate=1.0,
        # Set profiles_sample_rate to 1.0 to profile 100%
        # of sampled transactions.
        # We recommend adjusting this value in production.
        profiles_sample_rate=1.0,
    )


########################################
####### DJANGO SETTINGS ###############
########################################
def random_secret_key():
    return os.urandom(24).hex()

SECRET_KEY = os.getenv("DJANGO_SECRET_KEY", random_secret_key())
DEBUG = DJANGO_ENV != "production"
ALLOWED_HOSTS = os.getenv("DJANGO_ALLOWED_HOSTS", "localhost").split(",")


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework.authtoken",
    "api",
    "corsheaders",  # for cross origin requests
    "ebhealthcheck.apps.EBHealthCheckConfig",  # for AWS Elastic Beanstalk health check
    "storages",  # for AWS S3 storage
    "drf_spectacular",  # for OpenAPI documentation
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "api.middleware.logging.RequestLogMiddleware",
]

ROOT_URLCONF = "project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "project.wsgi.application"


########################################
####### DATABASE SETTINGS #############
########################################

if "test" in sys.argv or not all(
    [os.getenv("DB_NAME"), os.getenv("DB_USER"), os.getenv("DB_PASS"), os.getenv("DB_HOST")]
):
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": "digibooks_test",
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql_psycopg2",
            "NAME": os.getenv("DB_NAME"),
            "USER": os.getenv("DB_USER"),
            "PASSWORD": os.getenv("DB_PASS"),
            "HOST": os.getenv("DB_HOST"),
            "PORT": "",
            "TEST": {
                "NAME": "digibooks_test",
            },
        },
    }


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
